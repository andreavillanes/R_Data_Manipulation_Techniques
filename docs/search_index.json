[["introduction.html", "Chapter 1 Introduction to R 1.1 Getting Started 1.2 Variable Assignment 1.3 Finding Variables 1.4 Deleting Variables", " Chapter 1 Introduction to R 1.1 Getting Started The simplest way to use R is to use it as if it were a calculator. For example, if we want to know what one plus one is, you may type: &gt; 1 + 1 We can use any arithmetic operator, like addition, subtraction, multiplication, division, divison, exponentiation, and modulus operations: &gt; # addition &gt; 1 + 1 &gt; &gt; # subtraction &gt; 6 - 4 &gt; &gt; # multiplication &gt; 2 * 2 &gt; &gt; # division &gt; 10 / 5 &gt; 10.2 / 5 &gt; &gt; # integer divison &gt; 15.2 %/% 5 &gt; 15.7 %/% 5 &gt; &gt; # modulus &gt; 15.2 %% 5 &gt; 15.8 %% 5 &gt; &gt; # exponential &gt; 2^3 R also provides numerous built-in functions to use in calculations, such as natural logs, exponentiation, square root, absolute value: &gt; # natural log &gt; log(10) &gt; &gt; # exponentiation &gt; exp(2) &gt; &gt; # square root &gt; sqrt(4) &gt; &gt; # absolute value &gt; abs(-4) R includes extensive facilities for accessing documentation and searching for help. This is useful to get more information about a specific function. The help() function and ? help operator in R provide access to the documentation pages for R functions. For example, to get help with the round() function, we submit the following code: &gt; #help() function &gt; help(round) &gt; &gt; #? operator &gt; ?round() 1.2 Variable Assignment A basic concept in programming is called a variable. A variable allows you to store a value (e.g. 10) or an object (e.g. a function description) in R. We can then further use the variables name to access the value or the object that is stored within this variable. For example, you can assign a value 10 to a variable my_variable: &gt; my_variable &lt;- 10 To print out the value of the variable, you simply type the name of your variable: &gt; my_variable A valid variable name consists of letters, numbers and the dot or underline characters. The variable name starts with a letter or the dot not followed by a number: &gt; # A variable can be operated on &gt; my_variable + 1 &gt; &gt; # And passed to a function &gt; sqrt(my_variable + 1) &gt; &gt; # To reassign a variable, just reassign in &gt; my_variable &lt;- 3000 &gt; &gt; # You can also operate on and reassign a variable to itself &gt; my_variable &lt;- my_variable + 1 You can broaden assignments beyond numbers: &gt; result &lt;- sqrt(9) &gt; &gt; fruit_1 &lt;- &quot;apple&quot; &gt; fruit_2 &lt;- &quot;banana&quot; &gt; fruit_3 &lt;- &quot;cantaloupe&quot; 1.3 Finding Variables To know all the variables currently available in the workspace we use the ls() function: &gt; print(ls()) The ls() function can also use patterns to match the variable names. &gt; # List the variables starting with the pattern &quot;var&quot;. &gt; print(ls(pattern = &quot;var&quot;)) 1.4 Deleting Variables Variables can be deleted by using the rm() function. Below we delete the variable my_variable: &gt; my_variable &lt;- 5 &gt; rm(my_variable) All the variables can be deleted by using the rm() and ls() function together: &gt; rm(list = ls()) Another common way to remove all variables in the R environment is to click on the little broom icon next to the button Import Dataset under the Environment tab. One can also go up to Session and do Restart R or New Session (the Restart R and New session options might come in handy for when programs crash). "]]
