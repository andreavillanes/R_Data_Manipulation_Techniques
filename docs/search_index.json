[["data-structures.html", "Chapter 2 Data Structures 2.1 Vectors 2.2 Lists 2.3 Arrays 2.4 Matrices 2.5 Data Frames 2.6 Working with different types", " Chapter 2 Data Structures 2.1 Vectors A vector is the simplest type of data structure in R. Vectors are particularly important as most of the functions you will write will work with vectors. Simply put, a vector is a sequence of data elements of the same basic type. We can construct a vector using the combine (c) function: &gt; # Here is a vector containing three numeric values 3, 5 and 7: &gt; numbers &lt;- c(3, 5, 7) &gt; &gt; #Here is a vector of logical values: &gt; logical &lt;- c(TRUE, FALSE, TRUE, FALSE, FALSE) &gt; &gt; #Here is a vector of character values: &gt; fruits &lt;- c(&quot;apple&quot;, &quot;oranges&quot;, &quot;banana&quot;) We can also change the value in a vector: &gt; fruits[2] &lt;- &quot;strawberries&quot; Every vector has two key properties: its type and its length: &gt; typeof(fruits) &gt; length(fruits) You can combine vectors using the combine function as well: &gt; results &lt;- c(1, 2, 3) &gt; other_results &lt;- c(4, 5, 6) &gt; combined_results &lt;- c(results, other_results) Vectors can be added together in an element-wise operation: &gt; total_add &lt;- results + other_results &gt; total_div &lt;- results / other_results &gt; total_mod &lt;- results %% other_results Functions can be applied to each element of the vector. However, not all functions are vectorized (we will cover this later): &gt; total_rou &lt;- round(total_div, 1) &gt; &gt; names &lt;- c(&quot;Simmons&quot;, &quot;Race&quot;, &quot;Healey&quot;, &quot;LaBarr&quot;, &quot;Villanes&quot;) &gt; names &lt;- sort(names, decreasing = TRUE) There are also functions for constructing useful types of vectors: &gt; # Replicate - replicates a value X number of times &gt; identity_vector &lt;- rep(1,10) &gt; identity_vector &gt; &gt; # Sequence operator &quot;:&quot; From:To &gt; sequence_vector &lt;- 1:10 &gt; &gt; # Sequence function - allows sequencing by a value &gt; sequence_by_two_vector &lt;- seq(0,10, 2) &gt; sequence_by_two_vector &gt; &gt; # Sample function - take a random sample from a vector &gt; random_vector &lt;- sample(sequence_by_two_vector,3) Finally, a vector doesnt have to be made with consistent elements, but it will force them to one type: &gt; values &lt;- c(&quot;IAA&quot;, 1, &quot;2021&quot;, 5) &gt; typeof(values) As we mentioned earlier, the elements of a vector can only be of one type. If we want elements of different types we will need a list. 2.2 Lists Lists are objects which contain elements of different types like  numbers, strings, vectors and another list inside it. A list can also contain a matrix or a function as its elements. A list is created using list() function. &gt; # Here are 3 vectors of different types &gt; v1 &lt;- c(&quot;apple&quot;, &quot;banana&quot;) &gt; v2 &lt;- c(&quot;dog&quot;, &quot;cat&quot;, &quot;bunny&quot;, &quot;pig&quot;, &quot;cow&quot;, &quot;horse&quot;) &gt; v3 &lt;- seq(0,10,by=2) &gt; &gt; v1;v2;v3 We can put all of these vectors into a list: &gt; # Here are 3 vectors of different types &gt; l1 &lt;- list(v1, v2, v3) &gt; &gt; class(l1) &gt; typeof(l1) List elements can be accessed via index. Each of the components of a list is accessed via the double bracket [[x]] syntax: &gt; # First element in the list &gt; l1[[1]] &gt; &gt; # First element in the first element (vector) of the list &gt; l1[[1]][1] List elements can be named: &gt; names(l1) &lt;- c(&quot;Fruit&quot;, &quot;Animals&quot;, &quot;Even_Numbers&quot;) Or they can be named upon creating the list: &gt; l1 &lt;- list(Fruit=v1, Animals=v2, Even_Numbers=v3) The elements in a list can be retrieved by name: &gt; l1$Fruit &gt; l1$Fruit[1] &gt; &gt; l1$Even_Numbers &gt; max(l1$Even_Numbers) A list can even contain lists: &gt; l2 &lt;- list(Odd_Numbers=seq(1,10,by=2), list1=l1) &gt; &gt; # First Vector &gt; l2$Odd_Numbers &gt; l2[[1]] &gt; &gt; # l1 within L2 &gt; l2$list1 &gt; l2[[2]] &gt; &gt; l2$list1$Fruit &gt; l2[[2]][1] &gt; &gt; l2$list1$Fruit[1] &gt; l2[[2]][[1]][1] &gt; &gt; l2[[2]][[1]][3] &lt;- &quot;blueberry&quot; &gt; l2$list1$Fruit &gt; l2 To combine lists: &gt; l4 &lt;- list(More_Fruit=c(&quot;melon&quot;, &quot;orange&quot;)) &gt; l1 &lt;- c(l1,l4) Finally, if we want to update part of a list, we can just operate on and update it accordingly: &gt; l1$Fruit &lt;- c(l1$Fruit, l4$More_Fruit) &gt; l1$Fruit 2.3 Arrays 2.4 Matrices 2.5 Data Frames 2.6 Working with different types "]]
